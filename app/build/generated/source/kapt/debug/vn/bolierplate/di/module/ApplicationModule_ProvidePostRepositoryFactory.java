// Generated by Dagger (https://google.github.io/dagger).
package vn.bolierplate.di.module;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import vn.bolierplate.db.AppDatabase;
import vn.bolierplate.network.PostApi;
import vn.bolierplate.network.PostRepository;

public final class ApplicationModule_ProvidePostRepositoryFactory
    implements Factory<PostRepository> {
  private final ApplicationModule module;

  private final Provider<PostApi> postAPIProvider;

  private final Provider<AppDatabase> appDBProvider;

  public ApplicationModule_ProvidePostRepositoryFactory(
      ApplicationModule module,
      Provider<PostApi> postAPIProvider,
      Provider<AppDatabase> appDBProvider) {
    this.module = module;
    this.postAPIProvider = postAPIProvider;
    this.appDBProvider = appDBProvider;
  }

  @Override
  public PostRepository get() {
    return Preconditions.checkNotNull(
        module.providePostRepository(postAPIProvider.get(), appDBProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static ApplicationModule_ProvidePostRepositoryFactory create(
      ApplicationModule module,
      Provider<PostApi> postAPIProvider,
      Provider<AppDatabase> appDBProvider) {
    return new ApplicationModule_ProvidePostRepositoryFactory(
        module, postAPIProvider, appDBProvider);
  }

  public static PostRepository proxyProvidePostRepository(
      ApplicationModule instance, PostApi postAPI, AppDatabase appDB) {
    return Preconditions.checkNotNull(
        instance.providePostRepository(postAPI, appDB),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
